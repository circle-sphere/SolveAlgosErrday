# 2022-07-25
# https://leetcode.com/problems/letter-combinations-of-a-phone-number/

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:     
        
        map_dic = {'2': ['a', 'b', 'c'], '3': ['d', 'e', 'f'],
                   '4': ['g', 'h', 'i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'],
                   '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z']
                  }
        
        res = []
        
        if len(digits)==1:
            res = map_dic[digits]
    
        
        elif len(digits)==2:
            for alpha0 in map_dic[digits[0]]:
                for alpha1 in map_dic[digits[1]]:
                    res.append(alpha0+alpha1)
                    
        elif len(digits)==3:
            for alpha0 in map_dic[digits[0]]:
                for alpha1 in map_dic[digits[1]]:
                    for alpha2 in map_dic[digits[2]]:
                        res.append(alpha0+alpha1+alpha2)

        elif len(digits)==4:
            for alpha0 in map_dic[digits[0]]:
                for alpha1 in map_dic[digits[1]]:
                    for alpha2 in map_dic[digits[2]]:
                        for alpha3 in map_dic[digits[3]]:
                            res.append(alpha0+alpha1+alpha2+alpha3)
                            
        else:
            # len(digits)==0
            pass
            
                        
        return res
        
